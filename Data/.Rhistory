plot(forecast(ar1, h = 12), col = "orange")
plot(forecast(ar1, h = 12), col = "orange")
plot(forecast(ar1, h = 12), col = "orange")
plot(forecast(ar1, h = 12), col = "orange")
ar1 <- Arima(PepperPrice[,1], order = c(2,0,0)) #AR(2) model
plot(PepperPrice[,1], xlab = 'Year', ylab = "Pepper Price", lwd=2, main = "Pepper Price Data with AR(2) Fit")
lines(ar1$fitted.values, col="blue", lwd = 2, lty = 2)
plot(forecast(ar1, h = 12), col = "orange")
summary(ar1)
plot(forecast(ar1, h = 12), col = "blue")
plot(forecast(ar1, h = 12), col = "blue", xlab = "Time", ylab = "Pepper Price")
time(gdp_diff)
gdp_diff <- Quandl("FRED/GDP", type="ts", transform="rdiff")
tail(time)
tnew2 <- data.frame(time = seq(2020,2023,length=12),
season=seasonaldummy(ts(data = NA, start = 2020,
end = c(2023,0), frequency = 4)))
pred <- predict(tslm(employment_rate ~ time + sin_employ + cos_employ + season), tnew2, se.fit = TRUE)
tnew2 <- data.frame(time = seq(2020,2023,length=12),
season=seasonaldummy(ts(data = NA, start = 2020,
end = c(2023,0), frequency = 4)))
pred <- predict(tslm(gdp_diff ~ time + sin_employ + cos_employ + season), tnew2, se.fit = TRUE)
tnew2 <- data.frame(time = seq(2020,2023,length=12),
season=seasonaldummy(ts(data = NA, start = 2020,
end = c(2023,0), frequency = 4)))
pred <- predict(tslm(gdp_diff ~ time + season), tnew2, se.fit = TRUE)
time <- time(gdp_diff)
season <- seasonaldummy(gdp_diff)
lm1 <- tslm(gdp_diff ~ time + season)
tnew2 <- data.frame(time = seq(2020,2023,length=12),
season=seasonaldummy(ts(data = NA, start = 2020,end = c(2023,0), frequency = 4)))
pred <- predict(tslm(gdp_diff ~ time + season), tnew2, se.fit = TRUE)
summary(lm1)
auto.arima(PepperPrice[,1])
ar1 <- Arima(PepperPrice[,1], order = c(2,0,0)) #AR(2) model
summary(ar1)
plot(PepperPrice[,1], xlab = 'Year', ylab = "Pepper Price", lwd=2, main = "Pepper Price Data with AR(2) Fit")
lines(ar1$fitted.values, col="blue", lwd = 2, lty = 2)
ar1 <- Arima(PepperPrice[,1], order = c(2,0,0)) #AR(2) model
plot(PepperPrice[,1], xlab = 'Year', ylab = "Pepper Price", lwd=2, main = "Pepper Price Data with AR(2) Fit")
lines(ar1$fitted.values, col="blue", lwd = 2, lty = 2)
rm(arma1, sarma1)
armafit <- arma(gdp_diff, order = c(3,2))[4]
plot(forecast(armafit, h=10))
rm(arma1, sarma1)
armafit <- Arima(gdp_diff, order = c(3,0,2))[4]
armafit <- Arima(gdp_diff, order = c(3,0,2))[4]
plot(forecast(armafit, h=10))
plot(forecast(armafit, h=10))
plot(forecast(armafit, h=10))
plot(forecast(armafit, h=10))
plot(forecast(armafit, h=10))
plot(forecast(armafit, h=10))
plot(forecast(ar1, h = 12), shadecols="oldstyle", col = "blue", xlab = "Time", ylab = "Pepper Price")
ar1 <- arima(PepperPrice[,1], order = c(2,0,0)) #AR(2) model
plot(PepperPrice[,1], xlab = 'Year', ylab = "Pepper Price", lwd=2, main = "Pepper Price Data with AR(2) Fit")
lines(ar1$fitted.values, col="blue", lwd = 2, lty = 2)
plot(forecast(ar1, h = 12), shadecols="oldstyle", col = "blue", xlab = "Time", ylab = "Pepper Price")
armafit <- arima(gdp_diff, order = c(3,0,2), seasonal = list(order = c(2,0,0), period = 4))
plot(forecast(armafit, h=10))
summary(armafit)
summary(ar1)
length(gdp_diff)
292/4
length(gdp_diff)
292/4
tnew2 <- data.frame(time = seq(2020,2073,length=292),
season=seasonaldummy(ts(data = NA, start = 2020,end = c(2073,0), frequency = 4)))
tnew2 <- data.frame(time = seq(2020,2073,length=292),
season=seasonaldummy(ts(data = NA, start = 2020,end = c(2073,q), frequency = 4)))
length(gdp_diff)
292/4
tnew2 <- data.frame(time = seq(2020,2073,length=292),
season=seasonaldummy(ts(data = NA, start = 2020,end = c(2073,q), frequency = 4)))
length(gdp_diff)
292/4
tnew2 <- data.frame(time = seq(2020,2073,length=292),
season=seasonaldummy(ts(data = NA, start = 2020,end = c(2073,q), frequency = 4)))
tnew2 <- data.frame(time = seq(2020,2073,length=292),
season=seasonaldummy(ts(data = NA, start = 2020,end = c(2073,1), frequency = 4)))
tnew2 <- data.frame(time = seq(2020,2073,length=292),
season=seasonaldummy(ts(data = NA, start = 2020,end = c(2073,90), frequency = 4)))
tnew2 <- data.frame(time = seq(2020,2073,length=292),
season=seasonaldummy(ts(data = NA, start = 2020,end = c(2073,88), frequency = 4)))
tnew2 <- data.frame(time = seq(2020,2073,length=292),
season=seasonaldummy(ts(data = NA, start = 2020,end = c(2073,80), frequency = 4)))
pred <- predict(tslm(gdp_diff ~ time + season), tnew2, se.fit = TRUE)
tnew2 <- data.frame(time = seq(2020,2073,length=292),
season=seasonaldummy(ts(data = NA, start = 2020,end = c(2073,80), frequency = 4)))
pred <- predict(tslm(gdp_diff ~ time + season), tnew2, se.fit = TRUE)
plot(tnew2$time, pred$fit, type = "l", main = "Forecast (h = 292) Without Confidence and Prediction Interval", xlab = "Time", ylab = "GDP")
AIC(lm1)
BIC(lm1)
AIC(armafit)
BIC(armafit)
AIC(lm1)
BIC(lm1)
AIC(armafit)
BIC(armafit)
eraic <- c(AIC(lm1), AIC(armafit))
erbic <- c(BIC(lm1), BIC(armafit))
data.frame(AIC = eraic, BIC = erbic, row.names = c("lm+season", "arma+sarma"))
end(gdp_diff) #end date
cov(sp500_ret, ftse_ret)
rm(list = ls())
1104+1172+1095+1147+998
6600-5516
0.8*200
0.9*160
1.4*40
1.5*56
1.75*64
load("C:/Users/Joshua Kan/Desktop/Spring 2020/Econ 143/Data and Code for R/poe5rdata/apap.rdata")
View(apap)
knitr::opts_chunk$set(echo = TRUE)
library(plm)
install.packages("plm")
library(lmtest) #for `coeftest()` and `bptest()`.
library(plm)
library(tseries) # for `adf.test()`
library(dynlm) #for function `dynlm()`
library(vars) # for function `VAR()`
library(nlWaldTest) # for the `nlWaldtest()` function
install.packages("nlWaldTest")
ary(nlWaldTest) # for the `nlWaldtest()` function
library(nlWaldTest) # for the `nlWaldtest()` function
library(lmtest) #for `coeftest()` and `bptest()`.
library(broom) #for `glance(`) and `tidy()`
library(PoEdata) #for PoE4 datasets
install.packages("PoEdata")
library(car) #for `hccm()` robust standard errors
library(sandwich)
library(knitr) #for `kable()`
library(forecast)
library(systemfit)
install.packages("systemfit")
library(systemfit)
library(AER)
library(xtable)
install.packages("xtable")
library(xtable)
library(PoE4data) #for PoE4 datasets
rm(apap)
knitr::opts_chunk$set(echo = TRUE)
gsf_gsj <- cbind(gsf_e, gsj_e)
library(xlsx)
library(vars)
library(lmtest)
library(forecast)
library(tseries)
data <- read.xlsx("Chapter11_exercises_data.xls", sheetIndex = 1)[1:7]
est <- data[2:113,]
pred <- data[114:nrow(data),]
#make time series data from it
gsf_e <- ts(as.numeric(data$GSF), start = 1975.25, freq = 4)
gsj_e <- ts(as.numeric(data$GSJ), start = 1975.25, freq = 4)
gal_e <- ts(as.numeric(data$GAL), start = 1975.25, freq = 4)
gsf_p <- ts(as.numeric(data$GSF), start = 2003.25, freq = 4)
gsj_p <- ts(as.numeric(data$GSJ), start = 2003.25, freq = 4)
gal_p <- ts(as.numeric(data$GAL), start = 2003.25, freq = 4)
gsf_gsj <- cbind(gsf_e, gsj_e)
m <- 20 # number of itteration
aic_bic <- matrix(NA, ncol = 3, nrow = m)
colnames(aic_bic) <- c("p", "AIC", "BIC")
# for loop
for(i in 1:m){
aic_bic[i,1] <- i
aic_bic[i,2] <- AIC(VAR(gsf_gsj, p = i))
aic_bic[i,3] <- BIC(VAR(gsf_gsj, p = i))
}
#plot the aic and bic with respect to p
par(mfrow = c(2,1))
plot(aic_bic[,1], aic_bic[,2], xlab = "p", ylab = "AIC", main = "AIC with p")
plot(aic_bic[,1], aic_bic[,3], xlab = "p", ylab = "BIC", main = "BIC with p")
knitr::opts_chunk$set(echo = TRUE)
m1_irf <- irf(m1)
?irf
m1_irf <- irf(m1)
m1_irf <- irf(m1)
library(xlsx)
library(vars)
library(lmtest)
library(forecast)
library(tseries)
m1_irf <- irf(m1)
m1_irf <- irf(m1)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
library(vars)
library(lmtest)
library(forecast)
library(tseries)
data <- read.xlsx("Chapter11_exercises_data.xls", sheetIndex = 1)[1:7]
est <- data[2:113,]
pred <- data[114:nrow(data),]
#make time series data from it
gsf_e <- ts(as.numeric(data$GSF), start = 1975.25, freq = 4)
gsj_e <- ts(as.numeric(data$GSJ), start = 1975.25, freq = 4)
gal_e <- ts(as.numeric(data$GAL), start = 1975.25, freq = 4)
gsf_p <- ts(as.numeric(data$GSF), start = 2003.25, freq = 4)
gsj_p <- ts(as.numeric(data$GSJ), start = 2003.25, freq = 4)
gal_p <- ts(as.numeric(data$GAL), start = 2003.25, freq = 4)
gsf_gsj <- cbind(gsf_e, gsj_e) #San fransisco and San jose
#finding p parameter
m <- 20 # number of itteration
aic_bic <- matrix(NA, ncol = 3, nrow = m)
colnames(aic_bic) <- c("p", "AIC", "BIC")
# for loop
for(i in 1:m){
aic_bic[i,1] <- i
aic_bic[i,2] <- AIC(VAR(gsf_gsj, p = i))
aic_bic[i,3] <- BIC(VAR(gsf_gsj, p = i))
}
#plot the aic and bic with respect to p
#par(mfrow = c(2,1))
plot(aic_bic[,1], aic_bic[,2], xlab = "p", ylab = "AIC", main = "AIC with p")
plot(aic_bic[,1], aic_bic[,3], xlab = "p", ylab = "BIC", main = "BIC with p")
m1 <- VAR(gsf_gsj, p = 5)
summary(m1)
grangertest(gsf_e ~ gsj_e, order = 5) #whether gsj can predict gsf
grangertest(gsj_e ~ gsf_e, order = 5)
m1_irf <- irf(m1)
plot(m1_irf)
tsdisplay(gsf)
tsdisplay(gsf_e)
gsf_ar <- arima(gsf_e, order = c(3,0,0))
gsj_ar <- arima(gsj_e, order = c(3,0,0))
dats_frame_est <- cbind(gsf, gsj)
dats_frame_est <- cbind(gsf_e, gsj_e)
dats_frame_pred <- cbind(gsf_p, gsj_p)
err_matrix <- matrix(NA, ncol = 4, nrow = nrow(dats_frame_pred))
colnames(err_matrix) <- c("GSF_var", "GSF_ar", "GSJ_var", "GSJ_ar")
# recursive scheme
for(i in 1:length(gsf_p)){
# Update the information set
dats_frame_est <- ts(rbind(dats_frame_est, dats_frame_pred[i-1,]),
start = 1975.25, freq = 4)
# Estimate the model using the estimation sample (updated)
mod_var <- VAR(dats_frame_est, p = 4)
mod_ar_gsf <- arima(dats_frame_est[,1], order = c(3,0,0))
mod_ar_gsj <- arima(dats_frame_est[,2], order = c(3,0,0))
# Store the error to the error matrix
err_matrix[i,1] <- dats_frame_pred[i,1] - forecast(mod_var, h = 1)$forecast$gsf$mean
err_matrix[i,2] <- dats_frame_pred[i,1] - forecast(mod_ar_gsf, h = 1)$mean
err_matrix[i,3] <- dats_frame_pred[i,2] - forecast(mod_var, h = 1)$forecast$gsj$mean
err_matrix[i,4] <- dats_frame_pred[i,2] - forecast(mod_ar_gsj, h = 1)$mean
}
head(err_matrix)
# MSE for VAR
mse(err_matrix[,"GSF_var"])
mse <- function(x){
sum(x^2) / length(x)
}
# MSE for VAR
mse(err_matrix[,"GSF_var"])
mse(err_matrix[,"GSJ_var"])
# MSE for AR(1)
mse(err_matrix[,"GSF_ar"])
mse(err_matrix[,"GSJ_ar"])
plot(forecast(mod1))
plot(forecast(m1))
gal_e <- ts(as.numeric(est$GAL), start = 1975.25, freq = 4)
gal_p <- ts(as.numeric(pred$GAL), start = 2003.25, freq = 4)
data_frame_est <- cbind(gsf_e, gal_e)
m <- 20 # number of itteration
aic_bic <- matrix(NA, ncol = 3, nrow = m)
colnames(aic_bic) <- c("p", "AIC", "BIC")
# for loop
for(i in 1:m){
aic_bic[i,1] <- i
aic_bic[i,2] <- AIC(VAR(data_frame_est, p = i))
aic_bic[i,3] <- BIC(VAR(data_frame_est, p = i))
}
data_frame_est
est$GAL
which(is.na(est$GAL))
gal_e <- ts(as.numeric(est$GAL), start = 1975.25, freq = 4)
gal_p <- ts(as.numeric(pred$GAL), start = 2003.25, freq = 4)
data_frame_est <- cbind(gsf_e, gal_e)
data_frame_est
m <- 20 # number of itteration
aic_bic <- matrix(NA, ncol = 3, nrow = m)
colnames(aic_bic) <- c("p", "AIC", "BIC")
# for loop
for(i in 1:m){
aic_bic[i,1] <- i
aic_bic[i,2] <- AIC(VAR(data_frame_est, p = i))
aic_bic[i,3] <- BIC(VAR(data_frame_est, p = i))
}
data_frame_est <- cbind(gsf_e, gal_e)
m <- 20 # number of itteration
aic_bic <- matrix(NA, ncol = 3, nrow = m)
colnames(aic_bic) <- c("p", "AIC", "BIC")
# for loop
for(i in 1:m){
aic_bic[i,1] <- i
aic_bic[i,2] <- AIC(VAR(data_frame_est, p = i))
aic_bic[i,3] <- BIC(VAR(data_frame_est, p = i))
}
?VAR
gal_e
data_frame_est
gsf_gsj
length(gal_e)
length(gsf_e)
gal_e <- ts(as.numeric(data$GAL), start = 1975.25, freq = 4)
gal_p <- ts(as.numeric(data$GAL), start = 2003.25, freq = 4)
data_frame_est <- cbind(gsf_e, gal_e)
m <- 20 # number of itteration
aic_bic <- matrix(NA, ncol = 3, nrow = m)
colnames(aic_bic) <- c("p", "AIC", "BIC")
# for loop
for(i in 1:m){
aic_bic[i,1] <- i
aic_bic[i,2] <- AIC(VAR(data_frame_est, p = i))
aic_bic[i,3] <- BIC(VAR(data_frame_est, p = i))
}
#plot the aic and bic with respect to p
par(mfrow = c(2,1))
plot(aic_bic[,1], aic_bic[,2], xlab = "p", ylab = "AIC", main = "AIC with p")
plot(aic_bic[,1], aic_bic[,3], xlab = "p", ylab = "BIC", main = "BIC with p")
data_frame_est <- cbind(gsf_e, gal_e)
m <- 20 # number of itteration
aic_bic <- matrix(NA, ncol = 3, nrow = m)
colnames(aic_bic) <- c("p", "AIC", "BIC")
# for loop
for(i in 1:m){
aic_bic[i,1] <- i
aic_bic[i,2] <- AIC(VAR(data_frame_est, p = i))
aic_bic[i,3] <- BIC(VAR(data_frame_est, p = i))
}
#plot the aic and bic with respect to p
#par(mfrow = c(2,1))
plot(aic_bic[,1], aic_bic[,2], xlab = "p", ylab = "AIC", main = "AIC with p")
plot(aic_bic[,1], aic_bic[,3], xlab = "p", ylab = "BIC", main = "BIC with p")
m2 <- VAR(data_frame_est, p = 3)
summary(m2)
grangertest(gsf_e ~ gal_e, order = 3)
grangertest(gal_e ~ gsf_e, order = 3)
knitr::opts_chunk$set(echo = TRUE)
library(xlsx)
setwd("C:/Users/Joshua Kan/Desktop/Spring 2020/Econ 143/Project/Data")
load("C:/Users/Joshua Kan/Desktop/Spring 2020/Econ 143/Project/Data/rice5.rdata")
View(rice5)
write.csv(rice5)
write.csv(rice5, "C:/Users/Joshua Kan/Desktop/Spring 2020/Econ 143/Project/Data" ,row.names = TRUE)
write.csv(rice5, file = "rice.csv" ,row.names = TRUE)
rice <- read.csv(file = "rice.csv", header = TRUE)
getwd()
rice <- read.csv(file = "rice.csv", header = TRUE)
rice <- read.csv(file = "rice.csv", header = TRUE)
rice <- read.csv(file = "rice.csv", header = TRUE)
load(rice5.rdata)
getwd()
setwd("C:/Users/Joshua Kan/Desktop/Spring 2020/Econ 143/Project/Data")
getwd()
load(rice5.rdata)
getwd()
load(rice5.rdata)
rice <- read.csv(file = "rice.csv", header = TRUE)
head(rice)
load('rice5.rdata')
rm(rice, rice5)
load('rice5.rdata')
rice <- load('rice5.rdata')
head(rice)
rm(rice, rice5)
load('rice5.rdata') #Downloaded from CCLE "Data and Code for R"
rice <- rice5 #load into variable for convenience purpose
head(rice)
load('rice5.rdata') #Downloaded from CCLE "Data and Code for R"
rice <- rice5 #load into variable for convenience purpose
head(rice)
?attach
rice <- plm.data(x = rice, indexes = c("firm", "dateid"))
library(plm)
plm.data
head(rice)
rice <- plm.data(x = rice, indexes = c("firm", "dateid"))
rice <- pdata.frame(x = rice, indexes = c("firm", "dateid"))
rice <- pdata.frame(x = rice, index = c("firm", "dateid"))
head(rice)
View(rice5)
rice <- pdata.frame(x = rice, index = c("firm", "year"))
load('rice5.rdata') #Downloaded from CCLE "Data and Code for R"
rice <- rice5 #load into variable for convenience purpose
head(rice)
rice <- pdata.frame(x = rice, index = c("firm", "year"))
x <- cbind(area, fert, labor, data = rice)
attach(rice)
attach(rice)
y <- cbind(prod)
x <- cbind(area, fert, labor)
head(y)
head(x)
attach(rice)
y <- cbind(prod)
x <- cbind(area, fert, labor)
attach(rice)
y <- cbind(prod) #independent variable "prod" (Rice production in tonnes)
x <- cbind(area, fert, labor) #dependent variables
summary(y)
summary(y, main = "Rice Production")
summary(y, main = "Rice Production")
Look at the descriptive statistics of each variables
```{r}
summary(y, main = "Rice Production")
```
Look at the descriptive statistics of each variables
```{r}
summary(y)
```
summary(X)
summary(X)
summary(x)
plm1 <- plm(y ~ x, data = rice, model = "pooling")
summary(plm1)
plm2 <- plm(y ~ x, data = rice, model = "between")
summary(plm1)
plm3 <- plm(y ~ x, data = rice, model = "within")
plm3 <- plm(y ~ x, data = rice, model = "within")
plm4 <- plm(y ~ x, data = rice, model =  "fd")
summary(plm1)
plm5 <- plm(y ~ x, data = rice, model = "random")
library(knitr)
?kable
kable(x = read.csv("rice_def", header = TRUE), caption = "Table Definition")
rice_def <- read.csv("rice_def", header = TRUE)
getwd()
rice_def <- read.csv("rice_def.csv", header = TRUE)
kable(x = read.csv("rice_def.csv", header = TRUE), caption = "Table Definition")
rm(rice_def)
kable(x = read.csv("rice_def.csv", header = TRUE), caption = "Table Definition")
kable(x = read.csv("rice_def.csv", header = TRUE))
read.csv("rice_def.csv", header = TRUE)
rice_def <- read.csv("rice_def.csv", header = TRUE)
rice_def
library(plm)
library(xlsx)
x <- c(area, fert, labor) #dependent variables
head(x)
x <- subset(x = rice, subset = rice[,3:5]) #dependent variables
x <- rice[,3:5] #dependent variables
head(rice)
head(x)
y <- prod #independent variable "prod" (Rice production in tonnes)
head(y)
head(y)
y <- rice["prod"] #independent variable "prod" (Rice production in tonnes)
head(y)
x <- rice[c("area", "fert", "labor")] #dependent variables
head(y)
head(x)
summary(y)
summary(x)
plm1 <- plm(y ~ x, data = rice, model = "pooling")
plm3 <- plm(y ~ x, data = rice, model = "within")
x <- cbind("area", "fert", "labor") #dependent variables
plm1 <- plm(y ~ x, data = rice, model = "pooling")
y
x
x <- cbind(c("area", "fert", "labor")) #dependent variables
x
attach(rice)
y <- cbind(prod) #independent variable "prod" (Rice production in tonnes)
x <- cbind(area, fert, labor) #dependent variables
x
attach(rice)
y <- cbind(prod) #independent variable "prod" (Rice production in tonnes)
x <- cbind(area, fert, labor) #dependent variables
plm1 <- plm(y ~ x, data = rice, model = "pooling")
summary(plm1)
plm2 <- plm(y ~ x, data = rice, model = "between")
summary(plm1)
plm3 <- plm(prod ~ area + fert + labor, data = rice, model = "within")
summary(plm1)
plm4 <- plm(y ~ x, data = rice, model =  "fd")
summary(plm1)
plm5 <- plm(prod ~ area + fert + labor, data = rice, model = "random")
summary(plm1)
plmtest(plm1)
plm2 <- plm(prod ~ area + fert + labor, data = rice, model = "between")
summary(plm1)
plm1 <- plm(prod ~ area + fert + labor, data = rice, model = "pooling")
summary(plm1)
plm4 <- plm(prod ~ area + fert + labor, data = rice, model =  "fd")
summary(plm1)
plm1 <- plm(prod ~ area + fert + labor, data = rice, model = "pooling")
summary(plm1)
plm2 <- plm(prod ~ area + fert + labor, data = rice, model = "between")
summary(plm2)
plm3 <- plm(prod ~ area + fert + labor, data = rice, model = "within")
summary(plm3)
plm4 <- plm(prod ~ area + fert + labor, data = rice, model =  "fd")
summary(plm4)
plm5 <- plm(prod ~ area + fert + labor, data = rice, model = "random")
summary(plm5)
plmtest(plm1)
pFtest(plm3, plm1)
phtest(plm3, plm5)
hist(y)
hist(y, main = "Rice Production Distribution")
hist(x)
hist(x[1])
x[1]
hist(x[,1])
hist(x[,1], main = "Area Planted Distribution", xlab = "Area (Hectares)")
hist(y, main = "Rice Production Distribution", xlab = "Rice Production (tonnes)")
View(rice5)
hist(x[,3], main = "Hired + family labor Distribution", xlab = "Hired + family labor (Person days)")
hist(x[,2], main = "Fertilizer applied Distribution", xlab = "Fertilizer applied (Kilogram)")
